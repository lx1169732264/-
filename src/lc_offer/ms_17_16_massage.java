package lc_offer;

/**
 * 一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，
 * 因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。
 * <p>
 * 示例 2：
 * 输入： [2,7,9,3,1]
 * 输出： 12
 * 解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。
 * <p>
 * 示例 3：
 * 输入： [2,1,4,5,3,1,1,3]
 * 输出： 12
 * 解释： 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。
 */
public class ms_17_16_massage {
    /**
     * 方法1: 动态规划法
     */
    public int massage(int[] nums) {
        int l = nums.length;

        if (l == 1) { return nums[0]; }
        if (l == 0) { return 0; }
        //用int[] m来存储最长总时长
        int[] m = new int[l];
        m[0] = nums[0];
        m[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i <= l - 1; i++) {
            //动态规划求得最长时长m[i]
            m[i] = Math.max(m[i - 1], m[i - 2] + nums[i]);
        }
        return m[l - 1];
    }
}
