package lc_1100;

/**
 * 你将会获得一系列视频片段，这些片段来自于一项持续时长为 T 秒的体育赛事。这些片段可能有所重叠，也可能长度不一。
 * 视频片段 clips[i] 都用区间进行表示：开始于 clips[i][0] 并于 clips[i][1] 结束。我们甚至可以对这些片段自由地再剪辑，例如片段 [0, 7] 可以剪切成 [0, 1] + [1, 3] + [3, 7] 三部分。
 * 我们需要将这些片段进行再剪辑，并将剪辑后的内容拼接成覆盖整个运动过程的片段（[0, T]）。返回所需片段的最小数目，如果无法完成该任务，则返回 -1 。
 * <p>
 * 示例 1：
 * 输入：clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
 * 输出：3
 * 解释：
 * 我们选中 [0,2], [8,10], [1,9] 这三个片段。
 * 然后，按下面的方案重制比赛片段：
 * 将 [1,9] 再剪辑为 [1,2] + [2,8] + [8,9] 。
 * 现在我们手上有 [0,2] + [2,8] + [8,10]，而这些涵盖了整场比赛 [0, 10]。
 * <p>
 * 示例 2：
 * 输入：clips = [[0,1],[1,2]], T = 5
 * 输出：-1
 * 解释：
 * 我们无法只用 [0,1] 和 [1,2] 覆盖 [0,5] 的整个过程。
 * <p>
 * 示例 3：
 * 输入：clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
 * 输出：3
 * 解释：
 * 我们选取片段 [0,4], [4,7] 和 [6,9] 。
 * <p>
 * 示例 4：
 * 输入：clips = [[0,4],[2,8]], T = 5
 * 输出：2
 * 解释：
 * 注意，你可能录制超过比赛结束时间的视频。
 * <p>
 * 提示：
 * 1 <= clips.length <= 100
 * 0 <= clips[i][0] <= clips[i][1] <= 100
 * 0 <= T <= 100
 */
public class Lc_1024_videoStitching {
    /**
     * 贪心
     * 对于所有左端点相同的片段，挑右端点最远的。
     * 进行预处理,对于[0,T-1]的每一个位置，记录以其为左端点的子区间中最远的右端点，存入maxn
     * <p>
     * 枚举每一个位置，当枚举到位置 ii 时，记左端点不大于 ii 的所有子区间的最远右端点为 last(当前能覆盖到的最远的右端点)
     * 每次枚举到新位置，用 maxn[i] 来更新 last。如果last==i，片段存在空缺。
     * 同时记录上一个子区间的结束位置 pre，每次i == pre ,说明枚举完了pre的子区间，要用新片段，新片段的结束位置为last,同时让片段总数ret+1
     */
    public static int videoStitching(int[][] clips, int T) {
        //将 T分为[0,1...T-1]的一个数组,记录每个下标能到达的最远距离
        int[] maxn = new int[T];
        for (int[] clip : clips) {
            if (clip[0] < T) {
                maxn[clip[0]] = Math.max(maxn[clip[0]], clip[1]);
            }
        }
        int last = 0, ret = 0, pre = 0;
        for (int i = 0; i < T; i++) {
            last = Math.max(last, maxn[i]);
            //当i和 last重叠时 ,说明[0,T-1]之间存在空缺
            if (i == last) {
                return -1;
            }
            //当i与pre重叠时,自片段枚举结束,让 ret++ ,pre指向last,索要新的片段
            if (i == pre) {
                ret++;
                pre = last;
            }
        }
        return ret;
    }

    public static void main(String[] args) {
        int[][] clips = {{0, 2}, {4, 6}, {8, 10}, {1, 9}, {1, 5}, {5, 9}};
        videoStitching(clips, 10);
    }
}
