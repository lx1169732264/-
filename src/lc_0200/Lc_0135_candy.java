package lc_0200;

/**
 * 分发糖果
 * 老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。
 * 你需要按照以下要求，帮助老师给这些孩子分发糖果：
 * 每个孩子至少分配到 1 个糖果。
 * 相邻的孩子中，评分高的孩子必须获得更多的糖果。
 * 那么这样下来，老师至少需要准备多少颗糖果呢？
 * <p>
 * 示例 1:
 * 输入: [1,0,2]
 * 输出: 5
 * 解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果
 * <p>
 * 示例 2:
 * 输入: [1,2,2]
 * 输出: 4
 * 解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果
 * 第三个孩子只得到 1 颗糖果，这已满足上述两个条件
 *
 * @author lx
 */
public class Lc_0135_candy {
    /**
     * 两次遍历
     * 左->右,右->左各扫描一遍,记录递增个数,生产2个数组
     * 如果要让当前数同时满足左右扫描的结果，需要取两个数组中较大的值
     * 例如 1,2,3,4,2,1
     * 左扫找递增数列，1,2,3,4,1,1
     * 右扫找递减数列，1,1,1,3,2,1
     * 作为峰值，要同时满足两侧发糖要求，只能给他往多的那一侧的排序发。
     * 时间复杂度：O(n)
     * 空间复杂度：O(n)
     */
    public int candy2(int[] ratings) {
        int n = ratings.length;
        int[] left = new int[n];
        for (int i = 0; i < n; i++) {
            if (i > 0 && ratings[i] > ratings[i - 1]) {
                left[i] = left[i - 1] + 1;
            } else {
                left[i] = 1;
            }
        }
        int right = 0, ret = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (i < n - 1 && ratings[i] > ratings[i + 1]) {
                right++;
            } else {
                right = 1;
            }
            ret += Math.max(left[i], right);
        }
        return ret;
    }

    /**
     * 从左到右枚举每一个同学，记前一个同学分得的糖果数量为 pre：
     * 如果当前同学比上一个同学评分高，说明我们就在最近的递增序列中，直接分配给该同学 pre+1 个糖果即可。
     * 否则我们就在一个递减序列中，直接分配给当前同学一个糖果，并把该同学所在的递减序列中所有的同学都再多分配一个糖果，以保证糖果数量还是满足条件。
     * 我们无需显式地额外分配糖果，只需要记录当前的递减序列长度，即可知道需要额外分配的糖果数量。
     * 注意:当前的递减序列长度和上一个递增序列等长时，需要把最近的递增序列的最后一个同学也并进递减序列中。
     */
    public int candy(int[] ratings) {
        //dec:当前递减序列长度  inc:最近的递增序列的长度  pre:前一个同学分得的糖果数量
        int res = 1, inc = 1, dec = 0, pre = 1, n = ratings.length;
        for (int i = 1; i < n; i++) {
            if (ratings[i] >= ratings[i - 1]) {
                dec = 0;
                pre = ratings[i] == ratings[i - 1] ? 1 : pre + 1;
                res += pre;
                inc = pre;
            } else {
                dec++;
                if (dec == inc) {
                    dec++;
                }
                res += dec;
                pre = 1;
            }
        }
        return res;
    }
}